
namespace oledssd1315
/* 230908 231011 https://github.com/calliope-net/oled-16x8

Grove - OLED Yellow&Blue Display 0.96(SSD1315)
https://wiki.seeedstudio.com/Grove-OLED-Yellow&Blue-Display-0.96-SSD1315_V1.0/

SparkFun Qwiic EEPROM Breakout - 512Kbit
https://www.sparkfun.com/products/18355

initdisplaycodes from https://gist.githubusercontent.com/pulsar256/564fda3b9e8fc6b06b89/raw/4bb559d4088e42f7b4859a8533be920434818617/ssd1306_init.c

https://cdn-shop.adafruit.com/datasheets/UG-2864HSWEG01.pdf (Seite 15, 20 im pdf)

OLED Display mit EEPROM neu programmiert von Lutz Elßner im September 2023
*/ {
    export enum eADDR { OLED_16x8_x3C = 0x3C, OLED_16x8_x3D = 0x3D }
    export enum eADDR_EEPROM { EEPROM_x50 = 0x50 }
    export enum eEEPROM_Startadresse { F800 = 0xF800, FC00 = 0xFC00, F000 = 0xF000, F400 = 0xF400 }

    //% group="OLED Display 0.96 + SparkFun Qwiic EEPROM Breakout - 512Kbit"
    //% block="i2c %pADDR beim Start || invert %pInvert drehen %pFlip i2c-Check %ck EEPROM: Zeichensatz %pEEPROM_Startadresse i2c %pEEPROM_i2cADDR"
    //% pADDR.shadow="oledssd1315_eADDR"
    //% pInvert.shadow="toggleOnOff" pInvert.defl=false
    //% pFlip.shadow="toggleOnOff" pFlip.defl=false
    //% ck.shadow="toggleOnOff" ck.defl=true
    //% pEEPROM_Startadresse.shadow="oledssd1315_eEEPROM_Startadresse"
    //% pEEPROM_i2cADDR.shadow="oledssd1315_eADDR_EEPROM"
    //% inlineInputMode=inline
    //% blockSetVariable=OLED16x8
    export function beimStart(pADDR: number, pInvert?: boolean, pFlip?: boolean, ck?: boolean,
        pEEPROM_Startadresse?: number, pEEPROM_i2cADDR?: number) {

        return new oledclass(pADDR, (pInvert ? true : false), (pFlip ? true : false), (ck ? true : false),
            pEEPROM_Startadresse, pEEPROM_i2cADDR) // optionaler boolean Parameter kann undefined sein
    }



    // ========== class oledclass

    export class oledclass {
        private readonly i2cADDR_OLED: number
        private readonly i2cCheck: boolean // i2c-Check
        private readonly i2cADDR_EEPROM: number
        private readonly startadresse_EEPROM: number

        private i2cError_OLED: number = 0 // Fehlercode vom letzten WriteBuffer (0 ist kein Fehler)
        private i2cError_EEPROM: number = 0

        constructor(pADDR: number, pInvert: boolean, pFlip: boolean, ck: boolean,
            pEEPROM_Startadresse: number, pEEPROM_i2cADDR: number) {

            this.i2cADDR_OLED = pADDR
            this.i2cCheck = ck
            this.startadresse_EEPROM = pEEPROM_Startadresse
            this.i2cADDR_EEPROM = pEEPROM_i2cADDR
            //this.i2cError = 0 // Reset Fehlercode
            this.init(pInvert, pFlip)
        }


        // ========== group="OLED Display 0.96 + SparkFun Qwiic EEPROM Breakout - 512Kbit"

        //% group="OLED Display 0.96 + SparkFun Qwiic EEPROM Breakout - 512Kbit"
        //% block="init %OLED16x8 || invert %pInvert drehen %pFlip" weight=8
        //% pInvert.shadow="toggleOnOff" pInvert.defl=false
        //% pFlip.shadow="toggleOnOff" pFlip.defl=false
        init(pInvert?: boolean, pFlip?: boolean): void {

            // Vcc Generated by Internal DC/DC Circuit
            const vccext = false

            let bu = Buffer.create(23)   // muss Anzahl der folgenden setUint8 entsprechen
            let offset = 0               // Buffer offset (offset++ liest erst den Wert und erhöht ihn dann)

            bu.setUint8(offset++, eCONTROL.x00_xCom) // CONTROL Byte 0x00: folgende Bytes (im selben Buffer) sind alle command und kein CONTROL
            // CONTROL Byte 0x80: ignoriert 2. command-Byte (0xD5) und wertet es als CONTROL
            // CONTROL Byte 0x80: nach jedem command muss (im selben Buffer) wieder ein CONTROL 0x80 vor dem nächsten command kommen
            // CONTROL Byte 0x80: wenn ein CONTROL 0x40 folgt, können (im selben Buffer) auch Display-Daten GDDRAM folgen


            // https://cdn-shop.adafruit.com/datasheets/UG-2864HSWEG01.pdf (Seite 15, 20 im pdf)

            bu.setUint8(offset++, 0xAE)  // Set display OFF

            bu.setUint8(offset++, 0xD5)  // Set Display Clock Divide Ratio / OSC Frequency
            bu.setUint8(offset++, 0x80)  //     default 0x80

            bu.setUint8(offset++, 0xA8)  // Set Multiplex Ratio
            bu.setUint8(offset++, 0x3F)  //     Multiplex Ratio for 128x64 (64-1)

            bu.setUint8(offset++, 0xD3)  // Set Display Offset
            bu.setUint8(offset++, 0x00)  //     Display Offset

            bu.setUint8(offset++, 0x40)  // Set Display Start Line

            bu.setUint8(offset++, 0x8D)  // Set Charge Pump
            //bu.setUint8(offset++, 0x14)  //     Charge Pump (0x10 Disable; 0x14 7,5V; 0x94 8,5V; 0x95 9,0V)
            bu.setUint8(offset++, (vccext ? 0x10 : 0x14))

            //bu.setUint8(offset++, 0xA1)  // Set Segment Re-Map default 0xA0
            bu.setUint8(offset++, (!pFlip ? 0xA1 : 0xA0))

            //bu.setUint8(offset++, 0xC8)  // Set Com Output Scan Direction default 0xC0
            bu.setUint8(offset++, (!pFlip ? 0xC8 : 0xC0))

            bu.setUint8(offset++, 0xDA)  // Set COM Hardware Configuration
            bu.setUint8(offset++, 0x12)  //     COM Hardware Configuration

            bu.setUint8(offset++, 0x81)  // Set Contrast (Helligkeit)
            //bu.setUint8(offset++, 0xCF)  //     Contrast default 0x7F
            bu.setUint8(offset++, (vccext ? 0x9F : 0xCF))

            bu.setUint8(offset++, 0xD9)  // Set Pre-Charge Period
            //bu.setUint8(offset++, 0xF1)  //     Pre-Charge Period (0x22 External, 0xF1 Internal)
            bu.setUint8(offset++, (vccext ? 0x22 : 0xF1))

            bu.setUint8(offset++, 0xDB)  // Set VCOMH Deselect Level
            bu.setUint8(offset++, 0x40)  //     VCOMH Deselect Level default 0x20

            bu.setUint8(offset++, 0xA4)  // Set all pixels OFF

            bu.setUint8(offset++, (pInvert ? 0xA7 : 0xA6))  // Set display not inverted / A6 Normal A7 Inverse display

            //bu.setUint8(offset++, 0xAF)  // Set display ON

            this.i2cWriteBuffer_OLED(bu) // nur 1 Buffer wird gesendet


            bu = Buffer.create(135)
            offset = 0            //offset = setCursorBuffer6(bu, 0, 0, 0)

            bu.setUint8(offset++, eCONTROL.x80_1Com) // CONTROL+1Command
            bu.setUint8(offset++, 0xB0)// | (page & 0x07)) // page number

            bu.setUint8(offset++, eCONTROL.x80_1Com) // CONTROL+1Command
            bu.setUint8(offset++, 0x00)// | (col & 0x0F)) // lower start column address 0x00-0x0F 4 Bit

            bu.setUint8(offset++, eCONTROL.x80_1Com) // CONTROL+1Command
            bu.setUint8(offset++, 0x10)// | (col >> 4) & 0x07) // upper start column address 0x10-0x17 3 Bit

            bu.setUint8(offset++, eCONTROL.x40_Data) // CONTROL+DisplayData
            bu.fill(0x00, offset++, 128)

            for (let page = 0; page <= 7; page++) {
                bu.setUint8(1, 0xB0 | page) // an offset=1 steht die page number (Zeile 0-7)
                // sendet den selben Buffer 8 Mal mit Änderung an 1 Byte
                // true gibt den i2c Bus dazwischen nicht für andere Geräte frei
                this.i2cWriteBuffer_OLED(bu, true) // Clear Screen
            }


        }

        // ========== group="OLED Display 0.96 + SparkFun Qwiic EEPROM Breakout - 512Kbit"


        //% group="OLED Display 0.96 + SparkFun Qwiic EEPROM Breakout - 512Kbit"
        //% block="Display %OLED16x8 löschen || von Zeile %vonZeile bis Zeile %bisZeile mit Bitmuster %charcode" weight=2
        //% pADDR.shadow="oledssd1315_eADDR"
        //% vonZeile.min=0 vonZeile.max=7 vonZeile.defl=0
        //% bisZeile.min=0 bisZeile.max=7 bisZeile.defl=7
        //% charcode.min=0 charcode.max=255 charcode.defl=0
        //% inlineInputMode=inline
        clearScreen(vonZeile?: number, bisZeile?: number, charcode?: number) {
            if (between(vonZeile, 0, 7) && between(bisZeile, 0, 7)) {
                let bu = Buffer.create(135)
                let offset = this.setCursorBuffer6(bu, 0, 0, 0)
                bu.setUint8(offset++, eCONTROL.x40_Data) // CONTROL+DisplayData
                bu.fill(charcode & 0xFF, offset++, 128)   // 128 Byte füllen eine Zeile pixelweise

                for (let page = vonZeile; page <= bisZeile; page++) {
                    bu.setUint8(1, 0xB0 | page) // an offset=1 steht die page number (Zeile 0-7)
                    // sendet den selben Buffer 8 Mal mit Änderung an 1 Byte
                    // true gibt den i2c Bus dazwischen nicht für andere Geräte frei
                    this.i2cWriteBuffer_OLED(bu, page < bisZeile) // Clear Screen
                }
                control.waitMicros(100000) // 100ms Delay Recommended
            }
        }







        // ========== group="i2c Fehlercode"

        //% group="i2c Fehlercode" advanced=true
        //% block="%OLED16x8 i2c Fehlercode"
        geti2cError() { return this.i2cError_OLED }



        // ========== private

        private setCursorBuffer6(bu: Buffer, offset: number, row: number, col: number) {
            // schreibt in den Buffer ab offset 6 Byte (CONTROL und Command für setCursor)
            // Buffer muss vorher die richtige Länge haben
            bu.setUint8(offset++, eCONTROL.x80_1Com) // CONTROL+1Command
            bu.setUint8(offset++, 0xB0 | row & 0x07)      // page number 0-7 B0-B7
            bu.setUint8(offset++, eCONTROL.x80_1Com) // CONTROL+1Command
            bu.setUint8(offset++, 0x00 | col << 3 & 0x0F) // (col % 16) lower start column address 0x00-0x0F 4 Bit
            bu.setUint8(offset++, eCONTROL.x80_1Com) // CONTROL+1Command
            bu.setUint8(offset++, 0x10 | col >> 1 & 0x07) // (col >> 4) upper start column address 0x10-0x17 3 Bit
            return offset
            //                    0x40               // CONTROL+Display Data
        }



        // ========== private i2cWriteBuffer i2cReadBuffer

        private i2cWriteBuffer_OLED(buf: Buffer, repeat: boolean = false) {
            if (this.i2cError_OLED == 0) { // vorher kein Fehler
                this.i2cError_OLED = pins.i2cWriteBuffer(this.i2cADDR_OLED, buf, repeat)
                if (this.i2cCheck && this.i2cError_OLED != 0)  // vorher kein Fehler, wenn (n_i2cCheck=true): beim 1. Fehler anzeigen
                    basic.showString(Buffer.fromArray([this.i2cADDR_OLED]).toHex()) // zeige fehlerhafte i2c-Adresse als HEX
            } else if (!this.i2cCheck)  // vorher Fehler, aber ignorieren (n_i2cCheck=false): i2c weiter versuchen
                this.i2cError_OLED = pins.i2cWriteBuffer(this.i2cADDR_OLED, buf, repeat)
            //else { } // n_i2cCheck=true und n_i2cError != 0: weitere i2c Aufrufe blockieren
        }

        private i2cWriteBuffer_EEPROM(buf: Buffer, repeat: boolean = false) {
            if (this.i2cError_EEPROM == 0) { // vorher kein Fehler
                this.i2cError_EEPROM = pins.i2cWriteBuffer(this.i2cADDR_EEPROM, buf, repeat)
                if (this.i2cCheck && this.i2cError_EEPROM != 0)  // vorher kein Fehler, wenn (n_i2cCheck=true): beim 1. Fehler anzeigen
                    basic.showString(Buffer.fromArray([this.i2cADDR_EEPROM]).toHex()) // zeige fehlerhafte i2c-Adresse als HEX
            } else if (!this.i2cCheck)  // vorher Fehler, aber ignorieren (n_i2cCheck=false): i2c weiter versuchen
                this.i2cError_EEPROM = pins.i2cWriteBuffer(this.i2cADDR_EEPROM, buf, repeat)
        }

        private i2cReadBuffer_EEPROM(size: number, repeat: boolean = false): Buffer {
            if (!this.i2cCheck || this.i2cError_EEPROM == 0)
                return pins.i2cReadBuffer(this.i2cADDR_EEPROM, size, repeat)
            else
                return Buffer.create(size)
        }

    } // class oledclass

    // namespace oledssd1315

    enum eCONTROL { // Co Continuation bit(7); D/C# Data/Command Selection bit(6); following by six "0"s
        // CONTROL ist immer das 1. Byte im Buffer
        x00_xCom = 0x00, // im selben Buffer folgen nur Command Bytes ohne CONTROL dazwischen
        x80_1Com = 0x80, // im selben Buffer nach jedem Command ein neues CONTROL [0x00 | 0x80 | 0x40]
        x40_Data = 0x40  // im selben Buffer folgen nur Display-Data Bytes ohne CONTROL dazwischen
    }



    // ========== blockId=oledssd1315_

    //% blockId=oledssd1315_eADDR block="%pADDR" blockHidden=true
    export function oledssd1315_eADDR(pADDR: eADDR): number { return pADDR }

    //% blockId=oledssd1315_eADDR_EEPROM block="%pADDR" blockHidden=true
    export function oledssd1315_eADDR_EEPROM(pADDR: eADDR_EEPROM): number { return pADDR }

    //% blockId=oledssd1315_eEEPROM_Startadresse block="%p" blockHidden=true
    export function oledssd1315_eEEPROM_Startadresse(p: eEEPROM_Startadresse): number { return p }

} // oledclass.ts
